{"version":3,"sources":["components/Form/Form.module.css","components/ContactList/ContactList.module.css","components/Section/Section.module.css","components/Filter/Filter.module.css","components/Container/Container.module.css","components/Container/Container.jsx","components/Section/Section.jsx","components/ContactList/Contact.jsx","components/ContactList/ContactList.jsx","components/Form/Form.jsx","components/Filter/Filter.jsx","components/App.jsx","index.js"],"names":["module","exports","Container","children","className","s","container","Section","title","section","Contact","name","number","onClick","item","type","button","ContactList","contacts","onDeleteContact","list","map","id","Form","onSubmit","useState","setName","setNumber","handleInputChange","event","target","value","reset","form","e","preventDefault","label","input","pattern","required","onChange","Filter","App","setContacts","filter","setFilter","visibleContacts","normalizedFilter","toLowerCase","contact","includes","getVisibleContacts","uuidv4","some","alert","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4aff937c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__7CK0W\",\"label\":\"Form_label__2eqvu\",\"input\":\"Form_input__26u9g\",\"button\":\"Form_button__2jLt4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2y9Oz\",\"item\":\"ContactList_item__2J9t8\",\"button\":\"ContactList_button__3-28e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__ekvZD\",\"title\":\"Section_title__1zcGF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__2eoQK\",\"input\":\"Filter_input__FZ5LT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3yNTw\"};","import s from \"./Container.module.css\";\r\n\r\nfunction Container({ children }) {\r\n  return <div className={s.container}>{children}</div>;\r\n}\r\n\r\nexport default Container;\r\n","import PropTypes from 'prop-types';\r\nimport s from './Section.module.css';\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <section className={s.section}>\r\n      {title && <h2 className={s.title}>{title}</h2>}\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n\r\nexport default Section;\r\n","import PropTypes from 'prop-types';\r\nimport s from './ContactList.module.css';\r\n\r\nconst Contact = ({ name, number, onClick }) => (\r\n  <li className={s.item}>\r\n    <p>\r\n      {name}: {number}\r\n    </p>\r\n    <button type=\"button\" className={s.button} onClick={onClick}>\r\n      Delete\r\n    </button>\r\n  </li>\r\n);\r\nContact.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Contact;\r\n","import PropTypes from 'prop-types';\r\nimport Contact from './Contact';\r\nimport s from './ContactList.module.css';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => {\r\n  return (\r\n    <ul className={s.list}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <Contact\r\n          key={id}\r\n          name={name}\r\n          number={number}\r\n          onClick={() => onDeleteContact(id)}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\nContactList.propTypes = {\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n};\r\n\r\nexport default ContactList;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './Form.module.css';\r\n\r\nexport default function Form({ onSubmit }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleInputChange = event => {\r\n    const { name, value } = event.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    onSubmit({ name, number });\r\n\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={handleSubmit}>\r\n      <label className={s.label}>\r\n        Name\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          className={s.input}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          value={name}\r\n          onChange={handleInputChange}\r\n        />\r\n      </label>\r\n      <label className={s.label}>\r\n        Number\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          className={s.input}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          value={number}\r\n          onChange={handleInputChange}\r\n        />\r\n      </label>\r\n      <button type=\"submit\" className={s.button}>\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\nForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport s from './Filter.module.css';\r\n\r\nfunction Filter({ value, onChange }) {\r\n  return (\r\n    <label className={s.label}>\r\n      Find contacts by name\r\n      <input\r\n        type=\"text\"\r\n        className={s.input}\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  );\r\n}\r\nFilter.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import { useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport Container from './Container/Container';\nimport Section from './Section/Section';\nimport ContactList from './ContactList/ContactList';\nimport Form from './Form/Form';\nimport Filter from './Filter/Filter';\n\nexport default function App() {\n  const [contacts, setContacts] = useState([\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ]);\n  const [filter, setFilter] = useState('');\n\n  // useEffect(() => {\n  //   const contacts = localStorage.getItem('contacts');\n  //   const parsedContacts = JSON.parse(contacts);\n\n  //   if (parsedContacts) {\n  //     setContacts(parsedContacts);\n  //   }\n  // }, [contacts]);\n\n  // componentDidUpdate(prevState) {\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  const addContact = ({ name, number }) => {\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n\n    setContacts(contacts => {\n      if (contacts.some(contact => contact.name === name)) {\n        alert(`${name} is already in contacts!`);\n        return contacts;\n      }\n      return [contact, ...contacts];\n    });\n  };\n\n  const deleteContact = contactId => {\n    setContacts(contacts => {\n      return contacts.filter(contact => contact.id !== contactId);\n    });\n  };\n\n  const changeFitler = e => {\n    setFilter(e.target.value);\n  };\n\n  const visibleContacts = getVisibleContacts();\n\n  return (\n    <Container>\n      <Section title=\"Phonebook\">\n        <Form onSubmit={addContact} />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter value={filter} onChange={changeFitler} />\n        <ContactList\n          contacts={visibleContacts}\n          onDeleteContact={deleteContact}\n        />\n      </Section>\n    </Container>\n  );\n}\n\n// class App extends Component {\n//   state = {\n//     contacts: [\n//       { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//       { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//       { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//       { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//     ],\n//     filter: '',\n//   };\n\n// componentDidMount() {\n// const contacts = localStorage.getItem('contacts');\n// const parsedContacts = JSON.parse(contacts);\n\n// if (parsedContacts) {\n//   this.setState({ contacts: parsedContacts });\n// }\n// }\n\n// componentDidUpdate(prevState) {\n//   if (this.state.contacts !== prevState.contacts) {\n//     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//   }\n// }\n\n// addContact = ({ name, number }) => {\n//   const contact = {\n//     id: uuidv4(),\n//     name,\n//     number,\n//   };\n\n//   this.setState(({ contacts }) => {\n//     if (contacts.some(contact => contact.name === name)) {\n//       return alert(`${name} is already in contacts!`);\n//     }\n//     return {\n//       contacts: [contact, ...contacts],\n//     };\n//   });\n// };\n\n// deleteContact = contactId => {\n//   this.setState(prevState => ({\n//     contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n//   }));\n// };\n\n// changeFitler = e => {\n//   this.setState({ filter: e.target.value });\n// };\n\n//   getVisibleContacts = () => {\n//     const { contacts, filter } = this.state;\n//     const normalizedFilter = filter.toLowerCase();\n\n//     return contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(normalizedFilter),\n//     );\n//   };\n\n//   render() {\n//     const { filter } = this.state;\n//     const visibleContacts = this.getVisibleContacts();\n\n//     return (\n//       <Container>\n//         <Section title=\"Phonebook\">\n//           <Form onSubmit={this.addContact} />\n//         </Section>\n//         <Section title=\"Contacts\">\n//           <Filter value={filter} onChange={this.changeFitler} />\n//           <ContactList\n//             contacts={visibleContacts}\n//             onDeleteContact={this.deleteContact}\n//           />\n//         </Section>\n//       </Container>\n//     );\n//   }\n// }\n\n// export default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}